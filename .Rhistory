## data frame lat, long
y ~ dpois(exp(log_lambda), ...,
parameters=list(log_lambda=~poly(lat,long,2)))
## Declare loglik-list first
loglik_list <- list(
dpois= expression(x*log(lambda)-lambda-lfactorial(x)))
mkfun <- function(formula,data) {
RHS <- formula[[3]] # dpois(lambda = (b0 * latitude^2))
response <- formula[[2]] # y
ddistn <- as.character(RHS[[1]])  ## dpois
arglist <- as.list(RHS[-1]) ## $lambda = (b0 * latitude^2)
arglist1 <- c(list(x=response),
arglist,
list(log=TRUE))
fn <- function(pars) { ##parameter
pars_and_data <- c(as.list(pars),data)
r <- with(pars_and_data,
-sum(do.call(ddistn,arglist1))
)
return(r)
}
gr <- function(pars) {
pars_and_data <- c(as.list(pars),data)
if (!ddistn %in% names(loglik_list)) {
stop("I can't evaluate the derivative for ",sQuote(ddistn))
}
## eventually we need to calculate partial derivatives of the log-likelihood
## with respect to all of its parameters
d0 <- Deriv(loglik_list[[ddistn]],"lambda")
## evaluate all of the arguments to the log-likelihood
arglist_eval <- lapply(arglist,eval,pars_and_data)
## evaluate response variable and assign its value to 'x'
arglist_eval$x <- eval(response, pars_and_data)
# d1 is latitude^2 and d2 is b0
d1 <- eval(d0, arglist_eval)
## compute the deriv of log_lik with respect to its parameters
# TODO: lambda might not exit for all parametric distributions
#       and "b0" is not necessarily going to be present in form
d2 <- eval(Deriv(arglist$lambda,"b0"),pars_and_data)
return(-sum(d1*d2))
## d(loglik_pois/d(lambda))* d(lambda)/d(b0)
}
}
## debug(mkfun)
ff <- mkfun(form, data=dd)
## debug(ff)
ff$fn(c(b0=1))
fff
ff
mkfun <- function(formula,data) {
RHS <- formula[[3]] # dpois(lambda = (b0 * latitude^2))
response <- formula[[2]] # y
ddistn <- as.character(RHS[[1]])  ## dpois
arglist <- as.list(RHS[-1]) ## $lambda = (b0 * latitude^2)
arglist1 <- c(list(x=response),
arglist,
list(log=TRUE))
fn <- function(pars) { ##parameter
pars_and_data <- c(as.list(pars),data)
r <- with(pars_and_data,
-sum(do.call(ddistn,arglist1))
)
return(r)
}
gr <- function(pars) {
pars_and_data <- c(as.list(pars),data)
if (!ddistn %in% names(loglik_list)) {
stop("I can't evaluate the derivative for ",sQuote(ddistn))
}
## eventually we need to calculate partial derivatives of the log-likelihood
## with respect to all of its parameters
d0 <- Deriv(loglik_list[[ddistn]],"lambda")
## evaluate all of the arguments to the log-likelihood
arglist_eval <- lapply(arglist,eval,pars_and_data)
## evaluate response variable and assign its value to 'x'
arglist_eval$x <- eval(response, pars_and_data)
# d1 is latitude^2 and d2 is b0
d1 <- eval(d0, arglist_eval)
## compute the deriv of log_lik with respect to its parameters
d2 <- eval(Deriv(arglist$lambda,"b0"),pars_and_data)
return(-sum(d1*d2))
## d(loglik_pois/d(lambda))* d(lambda)/d(b0)
}
return(list(fn=fn, gr=gr))
}
ff <- mkfun(form, data=dd)
## debug(ff)
ff$fn(c(b0=1))
ff$gr(c(b0=1))
pars
pars_and_data
grad(log, x)
grad(log, 1)
grad(log, 2)
dd$latitude
grad(dpois, dd$latitude)
arglist1
2^2
c(3,4,5)^2
grad(dpois, lambda=1, 1)
grad(dpois, lambda=1, 2)
grad(dpois, lambda=2, 2)
grad(dpois, lambda=1, 0.5)
grad(dpois, lambda=1, 0.5^2)
grad(dpois, lambda=1.3, 1)
grad(dpois, lambda=0.24, 1)
b0=1
lambda = b0*dd$latitude
x = dd$y
x*log(lambda)-lambda-lfactorial(x)
-sum(x*log(lambda)-lambda-lfactorial(x))
b0=1
lambda = b0*dd$latitude^2
x = dd$y
-sum(x*log(lambda)-lambda-lfactorial(x))
pois <-  function(x){x*log(lambda)-lambda-lfactorial(x)}
grad(pois, dd$y)
lambda
lambda <- function(b0){b0*latitude^2}
-sum(x*log(lambda(b0=1))-lambda(b0=1)-lfactorial(x)) ## 417.6891
lambda <- function(b0){b0*dd$latitude^2}
-sum(x*log(lambda(b0=1))-lambda(b0=1)-lfactorial(x)) ## 417.6891
-(grad(pois, dd$y)*grad(lambda, b0=1))
-(grad(pois, dd$y)*grad(lambda, 1))
constant = dd$latitude^2
lambda <- function(b0){b0*dd$constant}
x = dd$y
-sum(x*log(lambda(b0=1))-lambda(b0=1)-lfactorial(x)) ## 417.6891
constant = dd$latitude^2
lambda <- function(b0){b0*constant}
x = dd$y
-sum(x*log(lambda(b0=1))-lambda(b0=1)-lfactorial(x))
-(grad(pois, dd$y)*grad(lambda, 1))
-(grad(pois, dd$y)*grad(lambda(1)))
lambda(1)
-(grad(pois, dd$y)*1
-(grad(pois, dd$y)*1)
)))
-(grad(pois, dd$y)*1)
-(grad(pois, dd$y))
grad(pois, dd$y)
lambda = b0*latitude^2
lambda = b0*dd$latitude^2
lambda <- function(b0) {b0*dd$latitude^2}
x = dd$y
-sum(x*log(lambda(b0=1))-lambda(b0=1)-lfactorial(x)) ## 417.6891
grad(pois, lambda(b0=1), dd$y)
grad(lambda, b0=1)
lambda(b0=1)
log(lambda(b0=1))
##check gr with numDeriv grad()
pois <-  function(lambda,x){x*log(lambda(b0))-lambda(b0)-lfactorial(x)}
grad(pois, lambda(b0=1), dd$y)
##check gr with numDeriv grad()
pois <-  function(lambda(b0),x){x*log(lambda(b0))-lambda(b0)-lfactorial(x)}
grad(lambda, 1)
lambda <- function(b0) {b0*dd$latitude^2}
grad(lambda, 1)
grad(lambda,1)
grad(lambda,1)
grad(lambda,b0)
-sum(grad(pois,dd$y)*dd$latitude^2)
grad(pois,dd$y)
grad(pois,x=dd$y)
lambda <- b0*dd$latitude^2
pois <-  function(x){x*log(lambda)-lambda-lfactorial(x)}
-sum(grad(pois,dd$y)*dd$latitude^2)
gr <- function(pars) {
pars_and_data <- c(as.list(pars),data)
if (!ddistn %in% names(loglik_list)) {
stop("I can't evaluate the derivative for ",sQuote(ddistn))
}
## eventually we need to calculate partial derivatives of the log-likelihood
## with respect to all of its parameters
d0 <- Deriv(loglik_list[[ddistn]],"lambda")
## evaluate all of the arguments to the log-likelihood
arglist_eval <- lapply(arglist,eval,pars_and_data)
## evaluate response variable and assign its value to 'x'
arglist_eval$x <- eval(response, pars_and_data)
# d1 is latitude^2 and d2 is b0
d1 <- eval(d0, arglist_eval)
## compute the deriv of log_lik with respect to its parameters
d2 <- eval(Deriv(arglist$lambda,"b0"),pars_and_data)
return(-sum(d1*d2))
## d(loglik_pois/d(lambda))* d(lambda)/d(b0)
}
pars_and_data
Deriv(loglik_list[[ddistn]],"lambda")
arglist_eval <- lapply(arglist,eval,pars_and_data)
arglist
arglist_eval
## evaluate response variable and assign its value to 'x'
arglist_eval$x <- eval(response, pars_and_data)
arglist_eval
y
response
pars_and_data
d1 <- eval(d0, arglist_eval)
d0 <- Deriv(loglik_list[[ddistn]],"lambda")
d1 <- eval(d0, arglist_eval)
d1
d1 == grad(pois,dd$y)
grad(pois, dd$y)
x=dd$y
grad(pois, lambda)
lambda
pars_and_data
arglist_eval
arglist
b0
eval
pars_and_data
## evaluate all of the arguments to the log-likelihood
arglist_eval <- lapply(arglist,eval,pars_and_data) ##lambda
arglist_eval
lambda = b0*dd$latitude^2
lambda
grad(pois, lambda)
d1
Deriv(arglist$lambda,"b0")
d2 <- eval(Deriv(arglist$lambda,"b0"),pars_and_data)
d2
dd$latitude^2 = d2
dd$latitude^2 == d2
arglist_eval$lambda == lambda
grad(pois, lambda)
d1
grad(pois, lambda)
x/lambda-1
-sum(grad(pois,lambda)*dd$latitude^2) ##36.20426
d1
d2
-sum(d1*d2)
grad(pois, lambda)
d1
d0
arglist_eval
## evaluate response variable and assign its value to 'x'
arglist_eval$x <- eval(response, pars_and_data) ## x = y
arglist_eval
x
d0
names(d1)
d1
d0
names(arglist_eval)
di
d1
grad(log, 2)
lambda
lambda == arglist_eval$lambda
grad(pois, lambda)
d1
d0
eval(d0, x=1, lambda=0.5)
eval(d0, as.list(x=1, lambda=0.5))
as.list(x=1, lambda=0.5)
d0
d0(x=1, lambda=0.5)
eval(d0, c(x=1, lambda=0.5))
eval(d0, as.list(c(x=1, lambda=0.5)))
eval(d0, as.list(c(x=15, lambda=0.5)))
d0
grad(pois, 0.5)
x <- 1
grad(pois, 0.5)
pois
length(pois)
pois(0.5)
x
lambda
d0
d1
pois2 <-  function(x){x*log(0.5)-0.5-lfactorial(x)}
grad(pois2, 15)
eval(d0, as.list(c(lambda=0.5, x=15)))
pois2 <-  function(b){15*log(b)-b-lfactorial(15)}
grad(pois2, 0.5)
x == arglist_eval$x
x
x = dd$y
x == arglist_eval$x
pars_and_data
## debug(mkfun)
ff <- mkfun(form, data=dd)
## debug(ff)
ff$fn(c(b0=1)) ##417.6891
ff$gr(c(b0=1)) ## -113.5597
b2=1
x2=dd$y
lambda2 = b2*dd$latitude^2
pois <-  function(lambda2){x2*log(lambda2)-lambda2-lfactorial(x2)}
d1
grad(pois, lambda2)
-sum(grad(pois,lambda)*dd$latitude^2) ##31.10758
-sum(grad(pois,lambda2)*dd$latitude^2) ##-113.5597
pars_and_data
arglist
?dbinom
?dpois
?dbinom
deparse(form)
parse(form)
substitute(form)
form
is.primitive(form)
is.primitive(x)
is.primitive(2)
is.primitive(sin(x))
is.primitive(e^x
)
is.primitive(exp(x))
unlist(form)
d2
pi
library(tidyverse)
library(caret)
setwd('~/Desktop/final_yr/case_comp/Datathon2020/')
benef <- read.csv('./cleaned_data/benef_final.csv')
ID <- read.csv('./cleaned_data/extra_benef.csv')
fraud_label <- read.csv('./web_app/data/final.csv')
fraud_label <- read.csv('./cleaned_data/final.csv')
ID
## for benef level analysis --------------
benef_extra <- benef %>% cbind(ID[,-1])
View(benef_extra)
head(fraud_label)
fraud_label
fraud_label$lof
table(fraud_label)
table(fraud_label$lof)
fraud_label$lof[345415,]
fraud_label[345415,lof]
fraud_label[345415,'lof']
fraud_label[345416,'lof']
setwd('~/Desktop/final_yr/case_comp/Datathon2020/')
benef <- read.csv('./cleaned_data/benef_final.csv')
names(benef)
fraud_label <- read.csv('./cleaned_data/final.csv')
nrow(benef)
l
nrow(fraud_label)
names(fraud_label)
#ID <- read.csv('./cleaned_data/extra_benef.csv')
fraud_label <- read.csv('./cleaned_data/final.csv')
nrow(fraud_label)
nrow(benef)
names(benef)
## for final model XGBoost ----------
morbid_final <- fraud_label %>% left_join(benef[, c(1,9:22)], by='CID')
str(morbid_final)
names(morbid_final)
## for final model XGBoost ----------
morbid_final <- fraud_label %>% left_join(benef[, c(1,9:19)], by='CID')
names(morbid_final)
write_csv(morbid_final, './web_app/morbid_final.csv')
names(fraud_label)
## for benef level analysis --------------
benef_label <- benef %>% left_join(fraud_label[,c(1,25)], by='CID')
names(benef_label)
str(benef_label)
benef_final <- benef1 %>% group_by(BID) %>%
summarise(Gender = first(Gender),
Is_inpatient = first(Is_inpatient),
Age = first(Age),
Race = first(Race),
State=first(State),
County=first(County),
Chronic_Alzheimer = first(Chronic_Alzheimer),
Chronic_Heartfailure = first(Chronic_Heartfailure),
Chronic_KidneyDisease = first(Chronic_KidneyDisease),
Chronic_Cancer = first(Chronic_Cancer),
Chronic_ObstrPulmonary = first(Chronic_ObstrPulmonary),
Chronic_Depression = first(Chronic_Depression),
Chronic_Diabetes = first(Chronic_Diabetes),
Chronic_IschemicHeart = first(Chronic_IschemicHeart),
Chronic_Osteoporasis = first(Chronic_Osteoporasis),
Chronic_rheumatoidarthritis = first(Chronic_rheumatoidarthritis),
Chronic_stroke = first(Chronic_stroke),
RenalDisease = first(RenalDisease),
FullYearPlanA = first(FullYearPlanA),
FullYearPlanB = first(FullYearPlanB),
ChronicDisease_Num = first(ChronicDisease_Num),
NumOfClaims = n(),
#NumOfProviders = n_distinct(PID),
NumOfNonFraud = sum(lof==-1),
NumOfPotentialFraud = sum(lof==0),
NumOfRealFraud = sum(lof==1)
#,
#Has_Fraud = case_when(NumFraud>0 ~ 1,
#                     Has_RealFraud>0 ~ 1,
#          TRUE ~ 0)
)
benef_final <- benef_label %>% group_by(BID) %>%
summarise(Gender = first(Gender),
Is_inpatient = first(Is_inpatient),
Age = first(Age),
Race = first(Race),
State=first(State),
County=first(County),
Chronic_Alzheimer = first(Chronic_Alzheimer),
Chronic_Heartfailure = first(Chronic_Heartfailure),
Chronic_KidneyDisease = first(Chronic_KidneyDisease),
Chronic_Cancer = first(Chronic_Cancer),
Chronic_ObstrPulmonary = first(Chronic_ObstrPulmonary),
Chronic_Depression = first(Chronic_Depression),
Chronic_Diabetes = first(Chronic_Diabetes),
Chronic_IschemicHeart = first(Chronic_IschemicHeart),
Chronic_Osteoporasis = first(Chronic_Osteoporasis),
Chronic_rheumatoidarthritis = first(Chronic_rheumatoidarthritis),
Chronic_stroke = first(Chronic_stroke),
RenalDisease = first(RenalDisease),
FullYearPlanA = first(FullYearPlanA),
FullYearPlanB = first(FullYearPlanB),
ChronicDisease_Num = first(ChronicDisease_Num),
NumOfClaims = n(),
#NumOfProviders = n_distinct(PID),
NumOfNonFraud = sum(lof==-1),
NumOfPotentialFraud = sum(lof==0),
NumOfRealFraud = sum(lof==1)
#,
#Has_Fraud = case_when(NumFraud>0 ~ 1,
#                     Has_RealFraud>0 ~ 1,
#          TRUE ~ 0)
)
## for benef level analysis --------------
benef_label <- benef %>% left_join(fraud_label[,c(1,19,25)], by='CID')
benef_final <- benef_label %>% group_by(BID) %>%
summarise(Gender = first(Gender),
Is_inpatient = first(Is_inpatient),
Age = first(Age),
Race = first(Race),
State=first(State),
County=first(County),
Chronic_Alzheimer = first(Chronic_Alzheimer),
Chronic_Heartfailure = first(Chronic_Heartfailure),
Chronic_KidneyDisease = first(Chronic_KidneyDisease),
Chronic_Cancer = first(Chronic_Cancer),
Chronic_ObstrPulmonary = first(Chronic_ObstrPulmonary),
Chronic_Depression = first(Chronic_Depression),
Chronic_Diabetes = first(Chronic_Diabetes),
Chronic_IschemicHeart = first(Chronic_IschemicHeart),
Chronic_Osteoporasis = first(Chronic_Osteoporasis),
Chronic_rheumatoidarthritis = first(Chronic_rheumatoidarthritis),
Chronic_stroke = first(Chronic_stroke),
RenalDisease = first(RenalDisease),
FullYearPlanA = first(FullYearPlanA),
FullYearPlanB = first(FullYearPlanB),
ChronicDisease_Num = first(ChronicDisease_Num),
NumOfClaims = n(),
#NumOfProviders = n_distinct(PID),
NumOfNonFraud = sum(lof==-1),
NumOfPotentialFraud = sum(lof==0),
NumOfRealFraud = sum(lof==1)
#,
#Has_Fraud = case_when(NumFraud>0 ~ 1,
#                     Has_RealFraud>0 ~ 1,
#          TRUE ~ 0)
)
##confirming
table(fraud_label$lof)
#ID <- read.csv('./cleaned_data/extra_benef.csv')
fraud_label <- read.csv('./cleaned_data/final.csv')
#ID <- read.csv('./cleaned_data/extra_benef.csv')
fraud_label <- read.csv('./cleaned_data/final.csv')
##confirming
table(fraud_label$lof)
## for final model XGBoost ----------
morbid_final <- fraud_label %>% left_join(benef[, c(1,9:19)], by='CID')
## for benef level analysis --------------
benef_label <- benef %>% left_join(fraud_label[,c(1,19,25)], by='CID')
benef_final <- benef_label %>% group_by(BID) %>%
summarise(Gender = first(Gender),
Is_inpatient = first(Is_inpatient),
Age = first(Age),
Race = first(Race),
State=first(State),
County=first(County),
Chronic_Alzheimer = first(Chronic_Alzheimer),
Chronic_Heartfailure = first(Chronic_Heartfailure),
Chronic_KidneyDisease = first(Chronic_KidneyDisease),
Chronic_Cancer = first(Chronic_Cancer),
Chronic_ObstrPulmonary = first(Chronic_ObstrPulmonary),
Chronic_Depression = first(Chronic_Depression),
Chronic_Diabetes = first(Chronic_Diabetes),
Chronic_IschemicHeart = first(Chronic_IschemicHeart),
Chronic_Osteoporasis = first(Chronic_Osteoporasis),
Chronic_rheumatoidarthritis = first(Chronic_rheumatoidarthritis),
Chronic_stroke = first(Chronic_stroke),
RenalDisease = first(RenalDisease),
FullYearPlanA = first(FullYearPlanA),
FullYearPlanB = first(FullYearPlanB),
ChronicDisease_Num = first(ChronicDisease_Num),
NumOfClaims = n(),
#NumOfProviders = n_distinct(PID),
NumOfNonFraud = sum(lof==-1),
NumOfPotentialFraud = sum(lof==0),
NumOfRealFraud = sum(lof==1)
#,
#Has_Fraud = case_when(NumFraud>0 ~ 1,
#                     Has_RealFraud>0 ~ 1,
#          TRUE ~ 0)
)
table(fraud_label$lof)
sum(benef_final$NumOfNonFraud)
sum(benef_final$NumOfPotentialFraud)
sum(benef_final$NumOfRealFraud)
## export new df
write_csv(benef_final, './cleaned_data/benef_new_label.csv')
write_csv(morbid_final, './web_app/morbid_final.csv')
name(benef_final)
names(benef_final)
